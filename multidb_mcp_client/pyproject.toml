[project]
name = "multi-datasource-mcp-py"
version = "0.1.0"
description = "多数据源模型上下文协议(MCP)服务器，提供统一的SQL执行接口，支持MySQL、PostgreSQL、XeSQL、RaseSQL、OceanBase等多种数据库"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "多数据源MCP团队", email = "team@example.com"}
]
maintainers = [
    {name = "多数据源MCP团队", email = "team@example.com"}
]
keywords = ["mcp", "database", "sql", "multi-datasource", "async"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: AsyncIO",
]
requires-python = ">=3.13"
dependencies = [
    "aiohttp>=3.12.15",
    "aiomysql>=0.2.0",
    "fastmcp>=2.11.2",
    "loguru>=0.7.3",
    "mcp[cli]>=1.12.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
]
postgresql = [
    "asyncpg>=0.28.0",
]
all = [
    "multi-datasource-mcp-py[dev,docs,postgresql]",
]

[project.urls]
Homepage = "https://github.com/your-org/multi-datasource-mcp-py"
Documentation = "https://github.com/your-org/multi-datasource-mcp-py/blob/main/README.md"
Repository = "https://github.com/your-org/multi-datasource-mcp-py"
Issues = "https://github.com/your-org/multi-datasource-mcp-py/issues"
Changelog = "https://github.com/your-org/multi-datasource-mcp-py/blob/main/CHANGELOG.md"

[project.scripts]
mcp-server = "src.server:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[[tool.uv.index]]
url = "https://pypi.tuna.tsinghua.edu.cn/simple"
default = true

